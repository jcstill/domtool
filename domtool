#!/bin/bash
# shellcheck source=/dev/null
# shellcheck disable=SC2034,SC2129

SCHED_CONFIG="/etc/xen/sched.conf"

usage(){
	printf "Usage: %s COMMAND [OPTION]...\n" "$PROGRAM"
	printf "xen hypervisor helper (basically a wrapper for xl and xen-tools)\n\n"
	printf "Commands:\n"
	printf "  create [CONFIG_FILE]                create new DOMU interactively or from CONFIG_FILE\n"
	printf "  erase DOMU                          delete DOMU, removing configs and destroying disks\n"
	printf "  help                                print this usage\n"
	printf "  restart DOMU                        restart DOMU\n"
	printf "  schedule {add...|remove...|update}  modify cpu scheduler\n"
	printf "      add DOMU VALUE                  add DOMU with VALUE weight (calls update)\n"
	printf "      remove DOMU                     removes DOMU from %s\n" "SCHED_CONFIG"
	printf "      update                          update running DOMUs with weights specified in:\n"
	printf "                                       %s\n" "$SCHED_CONFIG"
	printf "Options:\n"
	printf "  -v, --verbose        be verbose in output (add more for more verbosity)\n"
	printf "  -f, --force          force execute the command\n"
	printf "  -h, --help           specific command help\n"
	exit
}

check_exist(){
	DOM="$(xl list|awk '{if(NR>2)print $1}'|grep -w "$1")"
	CFG="$(find /etc/xen/*.cfg|grep -w "$1")"
	LVM="$(find /dev/vg0/*-{disk,swap}|grep -w "$1")"
	if [ -n "$DOM" ] || [ -n "$CFG" ] || [ -n "$LVM" ];then
		echo 0
		return
	fi
	echo 1
}

erase_dom(){
	if [ -z "$1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s erase DOMU\n" "$PROGRAM"
		exit 1
	fi
	if [ "$HELP" == "1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s erase DOMU\n" "$PROGRAM"
		exit 1
	fi
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m checking %s\n" "$1";fi
	if [ "$(check_exist "$1")" == "1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m DOMU specified not found\n"
		exit 1
	fi
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m %s exists\n" "$1";fi
	if [ "$FORCE" != "1" ];then
		printf "\e[38;2;255;0;0m[!]\e[0m This will irreversibly delete data.\n"
		printf "\e[38;2;255;255;255m[?]\e[0m Are you sure you want to completely erase %s [yes/no]? " "$1"
		read -r DELETE
		if [ "$DELETE" == "y" ] || [ "$DELETE" == "Y" ];then
			printf "Please type \"yes\": "
			read -r DELETE
		fi
	else
		DELETE=yes
	fi
	STARTTIME="$(date +%s)"
	if [ "$DELETE" == "yes" ];then
		# If DOMU is running, kill it
		DOM="$(xl list|awk '{if(NR>2)print $1}'|grep -w "$1")"
		if [ -n "$DOM" ];then
			if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m destroying %s\n" "$1";fi
			if [ "$VERBOSE" -ge "2" ];then
				xl destroy "$1"
			else
				xl destroy "$1" 2>/dev/null
			fi
			COUNTER=0
			while [[ $DOM == *"$1"* ]];do
				DOM="$(xl list|awk '{if(NR>2)print $1}'|grep -w "$1")"
				sleep 1
				COUNTER=$((COUNTER + 1))
				if [ $COUNTER -gt 300 ];then
					if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;255;0;0m[!]\e[0m %s failed to shut down in a timely manner\n" "$1";fi
					if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;255;0;0m[!]\e[0m destroying %s\n" "$1";fi
					if [ "$VERBOSE" -ge "2" ];then
						xl destroy "$1"
					else
						xl destroy "$1" 2>/dev/null
					fi
					break
				fi
			done
		fi
		# If DOMU has a config file, delete it
		CFG="$(find /etc/xen/*.cfg|grep -w "$1")"
		if [ -n "$CFG" ];then
			if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m removing config\n";fi
			if [ "$VERBOSE" -ge "2" ];then
				rm -rf /etc/xen/"$1".cfg
			else
				rm -rf /etc/xen/"$1".cfg 2>/dev/null
			fi
		fi
		# If DOMU has partitions on the drive, remove them
		LVM="$(find /dev/vg0/*-{disk,swap}|grep -w "$1")"
		if [ -n "$LVM" ];then
			if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m deleting drives\n";fi
			if [ "$VERBOSE" -ge "2" ];then
				umount /dev/vg0/"$1"-swap
				umount /dev/vg0/"$1"-disk
				sleep 1
				lvchange -an /dev/vg0/"$1"-swap
				lvchange -an /dev/vg0/"$1"-disk
				sleep 1
				lvremove /dev/vg0/"$1"-swap -y
				lvremove /dev/vg0/"$1"-disk -y
			else
				umount /dev/vg0/"$1"-swap 2>/dev/null
				umount /dev/vg0/"$1"-disk 2>/dev/null
				sleep 1
				lvchange -an /dev/vg0/"$1"-swap 2>/dev/null
				lvchange -an /dev/vg0/"$1"-disk 2>/dev/null
				sleep 1
				lvremove /dev/vg0/"$1"-swap -y >/dev/null 2>&1
				lvremove /dev/vg0/"$1"-disk -y >/dev/null 2>&1
			fi
		fi
		update_sched remove "$1"
	elif [ "$VERBOSE" -ge "1" ];then
		printf "\e[38;2;0;255;0m[+]\e[0m not removing %s\n" "$1"
	fi
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m done\n";fi
	ENDTIME="$(date +%s)"
	TOTALTIME=$((ENDTIME-STARTTIME))
	TOTALTIME="$(date -d@$TOTALTIME -u +%H:%M:%S)"
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m script time: %s\n" "$TOTALTIME";fi
}

# !TODO: add interactive mode
create_dom(){
	if [ -z "$1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s new [CONFIG_FILE]\n" "$PROGRAM"
		exit 1
	fi
	if [ "$HELP" == "1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s new [CONFIG_FILE]\n" "$PROGRAM"
		exit 1
	fi
	source "$1" 2> /dev/null
	if [ -z "$DOMNAME" ] || [ -z "$DIST" ] || [ -z "$LVM" ] || [ -z "$IP" ] || [ -z "$GATEWAY" ] || [ -z "$NETMASK" ] || [ -z "$NAMESERVER" ] || [ ! -f "$1" ];then
		printf "\e[38;2;255;0;0m[!]\e[0m Error not all parameters set in config file.\n"
		printf "Required Parameters:\n"
		printf "    DOMNAME\n    DIST\n    LVM\n    IP\n    GATEWAY\n    NETMASK\n    NAMESERVER\n"
		printf "Optional Parameters:\n"
		printf "    VCPUS         1 default\n    MEMORY        1gb default\n    SIZE          15gb default\n    SWAP          2gb default\n    CREDIT        256 default\n\n"
		printf "should I create a template in %s? [y/n] " "$1"
		read -r template
		if [ "$template" == "y" ];then
			printf "writing config\n"
			printf "# General:\nDOMNAME=\nDIST=\nVCPUS=1\nMEMORY=1gb\n\n" > "$1"
			printf "# Networking:\nIP=\nGATEWAY=\nNETMASK=\nNAMESERVER=\n\n" >> "$1"
			printf "# Storage:\nLVM=vg0\nSIZE=15gb\nSWAP=2gb\n\n" >> "$1"
			printf "# Credit Scheduler\nCREDIT=256\n" >> "$1"
			
		fi
		return
	fi
	if [ "$(check_exist "$DOMNAME")" == "0" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m DOMU %s already exists\n" "$DOMNAME"
		exit 1
	fi
	STARTTIME="$(date +%s)"
	xen-create-image --hostname="$DOMNAME" --memory="$MEMORY" --vcpus="$VCPUS" --size="$SIZE" --swap="$SWAP" --dist="$DIST" --ip="$IP" --gateway="$GATEWAY" --netmask="$NETMASK" --nameserver="$NAMESERVER" --lvm="$LVM" --noboot
	if [ ! -f /etc/xen/"$DOMNAME".cfg ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m /etc/xen/%s.cfg doesn't exist. xen-create-image must have failed. exiting.\n" "$DOMNAME"
		rm -rf ./tmp.cfg
		exit
	fi
	cp /etc/xen/"$DOMNAME".cfg ./tmp.cfg
	TYPE="$(grep -n type < ./tmp.cfg)"
	if [[ -z $TYPE ]];then
		sed -i "s/bootloader = 'pygrub'/type=\n\nbootloader = 'pygrub'/" ./tmp.cfg
	fi
	sed -i "$(grep -n type < ./tmp.cfg|tr ':' ' '|awk '{print $1}')s/.*/type= 'pvh'/" ./tmp.cfg
	MAC="$(printf '%02X:%s\n' "$(( $(printf '%d\n' $((16#$(openssl rand -hex 1)))) & 254 ))" "$(openssl rand -hex 5|sed 's/\(..\)/\1:/g; s/:$//')"|sed -e 's/\(.*\)/\U\1/')"
	IP="$(grep vif < ./tmp.cfg|tr "'" ' '|tr ',[]' '\n'|grep ip|awk '{print $1}')"
	REP="vif = [ '$IP, mac=$MAC, bridge=xenbr0' ]"
	sed -i "$(grep -n vif < ./tmp.cfg|tr ':' ' '|awk '{print $1}')s/.*/$REP/" ./tmp.cfg
	cp ./tmp.cfg /etc/xen/"$DOMNAME".cfg
	RTPASS="$(grep "Root Password" < /var/log/xen-tools/"$DOMNAME".log|awk '{print $4}')"
	printf "\e[38;2;0;255;0m[+]\e[0m Root Password: %s\n" "$RTPASS"

	xl create -q /etc/xen/"$DOMNAME".cfg 2>/dev/null

	IP="$(echo "$IP"|tr '=' ' '|awk '{print $2}')"
	DOMU="$(ping -c 1 -q "$IP"|grep transmitted|awk '{print $4}')"
	while [ "$DOMU" -ne 1 ];do
		DOMU="$(ping -c 1 -q "$IP"|grep transmitted|awk '{print $4}')"
		sleep 1
	done
	update_sched add "$DOMNAME" "$CREDIT"
	ENDTIME="$(date +%s)"
	TOTALTIME=$((ENDTIME-STARTTIME))
	TOTALTIME="$(date -d@$TOTALTIME -u +%H:%M:%S)"
	printf "\e[38;2;0;255;0m[+]\e[0m script time: %s\n" "$TOTALTIME"
	echo "sudo xl console $DOMNAME"
	rm -rf ./tmp.cfg
}

update_sched(){
	if [ "$HELP" == "1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s schedule {add DOMU VALUE|remove DOMU|update}\n" "$PROGRAM"
		exit 1
	fi
	STARTTIME="$(date +%s)"
	if [ "$1" == "add" ] && [ -n "$2" ] && [ -n "$3" ];then
		if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m adding %s to config\n" "$2";fi
		printf "%s\t%s\n" "$2" "$3" >> "$SCHED_CONFIG"
	elif [ "$1" == "remove" ] && [ -n "$2" ];then
		if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m removing %s from config\n" "$2";fi
		NUMBER="$(grep -nw "$2" < "$SCHED_CONFIG"|tr ':' ' '|awk '{print $1}'|head -1)"
		if [ -n "$NUMBER" ];then
			sed -i "$(grep -nw "$2" < "$SCHED_CONFIG"| tr ':' ' '|awk '{print $1}'|head -1)s/.*//" "$SCHED_CONFIG"
		fi
		sed -i '/^$/d' "$SCHED_CONFIG"
		return
	elif [ "$1" != "update" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s schedule {add DOMU VALUE|remove DOMU|update}\n" "$PROGRAM"
		return
	fi
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m updating DOMUs from config\n";fi
	while read -r i; do
		DOMU="$(echo "$i"|awk '{print $1}')"
		SCHD="$(echo "$i"|awk '{print $2}')"
		if [ "$VERBOSE" -ge "2" ];then
			xl sched-credit -d "$DOMU" -w "$SCHD"
		else
			xl sched-credit -d "$DOMU" -w "$SCHD" 2>/dev/null
		fi
	done < "$SCHED_CONFIG"
	if [ "$VERBOSE" -ge "2" ];then xl sched-credit 2>/dev/null;fi
	ENDTIME="$(date +%s)"
	TOTALTIME=$((ENDTIME-STARTTIME))
	TOTALTIME="$(date -d@$TOTALTIME -u +%H:%M:%S)"
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m script time: %s\n" "$TOTALTIME";fi
}

restart_dom(){
	if [ -z "$1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s erase DOMU\n" "$PROGRAM"
		exit 1
	fi
	if [ "$HELP" == "1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s erase DOMU\n" "$PROGRAM"
		exit 1
	fi
	if [ "$(check_exist "$1")" == "1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m DOMU specified not found\n"
		return
	fi
	STARTTIME="$(date +%s)"
	# If DOMU is running, kill it
	DOM="$(xl list|awk '{if(NR>2)print $1}'|grep -w "$1")"
	if [ -n "$DOM" ];then
		if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m %s shutting down\n" "$1";fi
		if [ "$FORCE" == "1" ];then
			if [ "$VERBOSE" -ge "2" ];then
				xl destroy "$1"
			else
				xl destroy "$1" 2> /dev/null
			fi
		elif [ "$FORCE" == "0" ];then
			if [ "$VERBOSE" -ge "2" ];then
				xl shutdown "$1"
			else
				xl shutdown "$1" 2> /dev/null
			fi
		fi
		COUNTER=0
		while [[ $DOM == *"$1"* ]];do
			DOM="$(xl list|awk '{if(NR>2)print $1}'|grep -w "$1")"
			sleep 1
			COUNTER=$((COUNTER + 1))
			if [ $COUNTER -gt 300 ];then
				if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;255;0;0m[!]\e[0m %s failed to shut down in a timely manner\n" "$1";fi
				if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;255;0;0m[!]\e[0m destroying %s\n" "$1";fi
				if [ "$VERBOSE" -ge "2" ];then
					xl destroy "$1"
				else
					xl destroy "$1" 2>/dev/null
				fi
				break
			fi
		done
	fi
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m %s is down\n" "$1";fi
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m starting %s\n" "$1";fi
	if [ "$VERBOSE" -ge "2" ];then
		xl create /etc/xen/"$1".cfg
	else
		xl create -q /etc/xen/"$1".cfg 2> /dev/null
	fi
	ENDTIME="$(date +%s)"
	TOTALTIME=$((ENDTIME-STARTTIME))
	TOTALTIME="$(date -d@$TOTALTIME -u +%H:%M:%S)"
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m script time: %s\n" "$TOTALTIME";fi
}

for i in xl xen-create-image;do
	command -v $i >/dev/null 2>&1 || { >&2 printf "\e[38;2;255;0;0m[!]\e[0m This script is designed for use on a xen hypervisor version 4.1 or higher with xen-tools installed\n"; exit 1; }
done
if [ "$EUID" -ne 0 ];then
	>&2 printf "\e[38;2;255;0;0m[!]\e[0m Please run as root\n"
	exit 1
fi

PROGRAM="${0##*/}"
VERBOSE=0
HELP=0
FORCE=0
opts="$(getopt -o vfh -l help,verbose,force -n "$PROGRAM" -- "$@" 2>/dev/null)"
err=$?
if [ $err -ne 0 ];then
	usage
	exit
fi
eval set -- "$opts"
while true; do case $1 in
	-f|--force) FORCE=1; shift ;;
	-h|--help) HELP=1; shift ;;
	-v|--verbose) VERBOSE=$((VERBOSE+1)); shift ;;
	--) shift; break ;;
esac done

case "$1" in
	erase) shift;		erase_dom "$@" ;;
	restart) shift;		restart_dom "$@" ;;
	create) shift;		create_dom "$@" ;;
	schedule) shift;	update_sched "$@" ;;
	help)				usage ;;
	* )					usage ;;
esac
