#!/bin/bash

# xen hypervisor helper (basically a wrapper for xl and xen-tools)
# Copyright (C) 2021, Jacob Still jacobcstill@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see https://www.gnu.org/licenses/

# shellcheck source=/dev/null
# shellcheck disable=SC2034,SC2129

SCHED_CONFIG="/etc/xen/sched.conf"
VERSION=0.03

usage(){
	printf "Usage: %s COMMAND [OPTION]...\n" "$PROGRAM"
	printf "xen hypervisor helper (basically a wrapper for xl and xen-tools)\n\n"
	printf "Commands:\n"
	printf "  \e[1mcreate\e[0m [CONFIG_FILE]                  create new \e[1mDOMU\e[0m interactively or from CONFIG_FILE\n"
	printf "  \e[1mdisable\e[0m|\e[1menable\e[0m DOMU                   enable or disable \e[1mDOMU\e[0m from starting on host boot\n"
	printf "  \e[1merase\e[0m DOMU                            delete \e[1mDOMU\e[0m, removing configs and destroying disks\n"
	printf "  \e[1mhelp\e[0m                                  print this usage\n"
	printf "  \e[1mrestart\e[0m DOMU                          restart \e[1mDOMU\e[0m\n"
	printf "  \e[1mschedule\e[0m [\e[1madd\e[0m...|\e[1mremove\e[0m...|\e[1mupdate\e[0m]    modify cpu scheduler\n"
	printf "      \e[1madd\e[0m DOMU VALUE                    add \e[1mDOMU\e[0m with VALUE weight (calls update)\n"
	printf "      \e[1medit\e[0m DOMU VALUE                   change \e[1mDOMU\e[0m to new VALUE weight (calls update)\n"
	printf "      \e[1mremove\e[0m DOMU                       removes \e[1mDOMU\e[0m from %s\n" "SCHED_CONFIG"
	printf "      \e[1mupdate\e[0m                            update running \e[1mDOMU\e[0ms with weights specified in:\n"
	printf "                                         %s\n" "$SCHED_CONFIG"
	printf "Options:\n"
	printf "  \e[1m-v\e[0m,\e[1m --verbose\e[0m        be verbose in output (add more for more verbosity)\n"
	printf "  \e[1m-V\e[0m,\e[1m --version\e[0m        show version and exit\n"
	printf "  \e[1m-f\e[0m,\e[1m --force\e[0m          force execute the command\n"
	printf "  \e[1m-h\e[0m,\e[1m --help\e[0m           specific command help\n"
	printf "  \e[1m-e\e[0m,\e[1m --enable\e[0m         start DOMU with host (used with create - default is disable)\n"
	printf "  \e[1m-w\e[0m,\e[1m --wait\e[0m           wait for DOMU to boot (used with create and restart - default is no wait)\n"
	exit
}

show_ver(){
	printf "%s v%s Copyright (C) 2021, Jacob Still jacobcstill@gmail.com\n" "$PROGRAM" "$VERSION"
	exit
}

check_exist(){
	local DOM
	local CFG
	local LVM
	DOM="$(xl list|awk '{if(NR>2)print $1}'|grep -w "$1")"
	CFG="$(find /etc/xen/*.cfg|grep -w "$1")"
	LVM="$(find /dev/vg0/*-{disk,swap}|grep -w "$1")"
	if [ -n "$DOM" ] || [ -n "$CFG" ] || [ -n "$LVM" ];then
		echo 0
		return
	fi
	echo 1
}

erase_dom(){
	if [ -z "$1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s erase DOMU\n" "$PROGRAM"
		exit 1
	fi
	if [ "$HELP" == "1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s erase DOMU\n" "$PROGRAM"
		exit 1
	fi
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m checking %s\n" "$1";fi
	if [ "$(check_exist "$1")" == "1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m DOMU specified not found\n"
		exit 1
	fi
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m %s exists\n" "$1";fi
	if [ "$FORCE" != "1" ];then
		printf "\e[38;2;255;0;0m[!]\e[0m This will irreversibly delete data.\n"
		printf "\e[38;2;255;255;255m[?]\e[0m Are you sure you want to completely erase %s [yes/no]? " "$1"
		read -r DELETE
		if [ "$DELETE" == "y" ] || [ "$DELETE" == "Y" ];then
			printf "Please type \"yes\": "
			read -r DELETE
		fi
	else
		DELETE=yes
	fi
	STARTTIME="$(date +%s)"
	if [ "$DELETE" == "yes" ];then
		# If DOMU is running, kill it
		DOM="$(xl list|awk '{if(NR>2)print $1}'|grep -w "$1")"
		if [ -n "$DOM" ];then
			if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m destroying %s\n" "$1";fi
			if [ "$VERBOSE" -ge "2" ];then
				xl destroy "$1"
			else
				xl destroy "$1" 2>/dev/null
			fi
			COUNTER=0
			while [[ $DOM == *"$1"* ]];do
				DOM="$(xl list|awk '{if(NR>2)print $1}'|grep -w "$1")"
				sleep 1
				COUNTER=$((COUNTER + 1))
				if [ $COUNTER -gt 300 ];then
					if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;255;0;0m[!]\e[0m %s failed to shut down in a timely manner\n" "$1";fi
					if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;255;0;0m[!]\e[0m destroying %s\n" "$1";fi
					if [ "$VERBOSE" -ge "2" ];then
						xl destroy "$1"
					else
						xl destroy "$1" 2>/dev/null
					fi
					break
				fi
			done
		fi
		# If DOMU has a config file, delete it
		CFG="$(find /etc/xen/*.cfg|grep -w "$1")"
		if [ -n "$CFG" ];then
			if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m removing config\n";fi
			if [ "$VERBOSE" -ge "2" ];then
				rm -rf /etc/xen/"$1".cfg
			else
				rm -rf /etc/xen/"$1".cfg 2>/dev/null
			fi
		fi
		# If DOMU has partitions on the drive, remove them
		LVM="$(find /dev/vg0/*-{disk,swap}|grep -w "$1")"
		if [ -n "$LVM" ];then
			if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m deleting drives\n";fi
			if [ "$VERBOSE" -ge "2" ];then
				umount /dev/vg0/"$1"-swap
				umount /dev/vg0/"$1"-disk
				sleep 1
				lvchange -an /dev/vg0/"$1"-swap
				lvchange -an /dev/vg0/"$1"-disk
				sleep 1
				lvremove /dev/vg0/"$1"-swap -y
				lvremove /dev/vg0/"$1"-disk -y
			else
				umount /dev/vg0/"$1"-swap 2>/dev/null
				umount /dev/vg0/"$1"-disk 2>/dev/null
				sleep 1
				lvchange -an /dev/vg0/"$1"-swap 2>/dev/null
				lvchange -an /dev/vg0/"$1"-disk 2>/dev/null
				sleep 1
				lvremove /dev/vg0/"$1"-swap -y >/dev/null 2>&1
				lvremove /dev/vg0/"$1"-disk -y >/dev/null 2>&1
			fi
		fi
		update_sched remove "$1"
	elif [ "$VERBOSE" -ge "1" ];then
		printf "\e[38;2;0;255;0m[+]\e[0m not removing %s\n" "$1"
	fi
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m done\n";fi
	ENDTIME="$(date +%s)"
	TOTALTIME=$((ENDTIME-STARTTIME))
	TOTALTIME="$(date -d@$TOTALTIME -u +%H:%M:%S)"
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m script time: %s\n" "$TOTALTIME";fi
}

# !TODO: add interactive mode
create_dom(){
	if [ -z "$1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s new [CONFIG_FILE]\n" "$PROGRAM"
		exit 1
	fi
	if [ "$HELP" == "1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s new [CONFIG_FILE]\n" "$PROGRAM"
		exit 1
	fi
	source "$1" 2> /dev/null
	if [ -z "$DOMNAME" ] || [ -z "$DIST" ] || [ -z "$LVM" ] || [ -z "$IP" ] || [ -z "$GATEWAY" ] || [ -z "$NETMASK" ] || [ -z "$NAMESERVER" ] || [ ! -f "$1" ];then
		printf "\e[38;2;255;0;0m[!]\e[0m Error not all parameters set in config file.\n"
		printf "Required Parameters:\n"
		printf "    DOMNAME\n    DIST\n    LVM\n    IP\n    GATEWAY\n    NETMASK\n    NAMESERVER\n"
		printf "Optional Parameters:\n"
		printf "    VCPUS         1 default\n    MEMORY        1gb default\n    SIZE          15gb default\n    SWAP          2gb default\n    CREDIT        256 default\n\n"
		printf "should I create a template in %s? [y/n] " "$1"
		read -r template
		if [ "$template" == "y" ];then
			printf "writing config\n"
			printf "# General:\nDOMNAME=\nDIST=\nVCPUS=1\nMEMORY=1gb\n\n" > "$1"
			printf "# Networking:\nIP=\nGATEWAY=\nNETMASK=\nNAMESERVER=\n\n" >> "$1"
			printf "# Storage:\nLVM=vg0\nSIZE=15gb\nSWAP=2gb\n\n" >> "$1"
			printf "# Credit Scheduler\nCREDIT=256\n" >> "$1"
			
		fi
		return
	fi
	if [ "$(check_exist "$DOMNAME")" == "0" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m DOMU %s already exists\n" "$DOMNAME"
		exit 1
	fi
	STARTTIME="$(date +%s)"
	xen-create-image --hostname="$DOMNAME" --memory="$MEMORY" --vcpus="$VCPUS" --size="$SIZE" --swap="$SWAP" --dist="$DIST" --ip="$IP" --gateway="$GATEWAY" --netmask="$NETMASK" --nameserver="$NAMESERVER" --lvm="$LVM" --noboot --pygrub
	if [ ! -f /etc/xen/"$DOMNAME".cfg ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m /etc/xen/%s.cfg doesn't exist. xen-create-image must have failed. exiting.\n" "$DOMNAME"
		rm -rf ./tmp.xen_cfg
		exit
	fi
	cp /etc/xen/"$DOMNAME".cfg ./tmp.xen_cfg
	TYPE="$(grep -n type < ./tmp.xen_cfg)"
	if [[ -z $TYPE ]];then
		sed -i "s/bootloader = 'pygrub'/type\n\nbootloader  = 'pygrub'/" ./tmp.xen_cfg
	fi
	sed -i "$(grep -n type < ./tmp.xen_cfg|tr ':' ' '|awk '{print $1}')s/.*/type        = 'pvh'/" ./tmp.xen_cfg
	MAC="$(printf '%02X:%s\n' "$(( $(printf '%d\n' $((16#$(openssl rand -hex 1)))) & 254 ))" "$(openssl rand -hex 5|sed 's/\(..\)/\1:/g; s/:$//')"|sed -e 's/\(.*\)/\U\1/')"
	IP="$(grep vif < ./tmp.xen_cfg|tr "'" ' '|tr ',[]' '\n'|grep ip|awk '{print $1}')"
	REP="vif        = [ '$IP, mac=$MAC, bridge=xenbr0' ]"
	sed -i "$(grep -n vif < ./tmp.xen_cfg|tr ':' ' '|awk '{print $1}')s/.*/$REP/" ./tmp.xen_cfg
	CFGLINENO="$(grep -n xen-tools < ./tmp.xen_cfg|tr ':' ' '|awk '{print $1}')"
	sed -i "$((CFGLINENO+1))s/^/#\n# Modified by $PROGRAM on $(date)\n/" ./tmp.xen_cfg
	cp ./tmp.xen_cfg /etc/xen/"$DOMNAME".cfg
	RTPASS="$(grep "Root Password" < /var/log/xen-tools/"$DOMNAME".log|awk '{print $4}')"
	printf "\e[38;2;0;255;0m[+]\e[0m Root Password: %s\n" "$RTPASS"

	xl create -q /etc/xen/"$DOMNAME".cfg 2>/dev/null

	if [ "$WAITFORBOOT" == "1" ];then
		IP="$(echo "$IP"|tr '=' ' '|awk '{print $2}')"
		DOMU="$(ping -c 1 -q "$IP"|grep transmitted|awk '{print $4}')"
		while [ "$DOMU" -ne 1 ];do
			DOMU="$(ping -c 1 -q "$IP"|grep transmitted|awk '{print $4}')"
			sleep 1
		done
	fi
	update_sched add "$DOMNAME" "$CREDIT"
	if [ "$ENABLE" == "1" ];then
		ed_dom enable "$DOMNAME"
	fi
	ENDTIME="$(date +%s)"
	TOTALTIME=$((ENDTIME-STARTTIME))
	TOTALTIME="$(date -d@$TOTALTIME -u +%H:%M:%S)"
	printf "\e[38;2;0;255;0m[+]\e[0m script time: %s\n" "$TOTALTIME"
	echo "sudo xl console $DOMNAME"
	rm -rf ./tmp.xen_cfg
}

update_sched(){
	if [ "$HELP" == "1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s schedule [add DOMU VALUE|edit DOMU VALUE|remove DOMU|update]\n" "$PROGRAM"
		exit 1
	fi
	STARTTIME="$(date +%s)"
	SCHD_PRG="$(xl sched-credit2)"
	if [ -z "$SCHD_PRG" ];then
		SCHD_PRG="sched-credit"
	else
		SCHD_PRG="sched-credit2"
	fi

	if [ "$1" == "add" ] && [ -n "$2" ] && [ -n "$3" ];then
		if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m adding %s to config\n" "$2";fi
		printf "%s\t%s\t%s\n" "$2" "$3" "0">> "$SCHED_CONFIG"
		if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m updating DOMUs from config\n";fi
		while read -r i; do
			DOMU="$(echo "$i"|awk '{print $1}')"
			SCHD="$(echo "$i"|awk '{print $2}')"
			if [ "$VERBOSE" -ge "2" ];then
				xl $SCHD_PRG -d "$DOMU" -w "$SCHD"
			else
				xl $SCHD_PRG -d "$DOMU" -w "$SCHD" 2>/dev/null
			fi
		done < "$SCHED_CONFIG"
	elif [ "$1" == "edit" ] && [ -n "$2" ] && [ -n "$3" ];then
		if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m changing %s to %s\n" "$2" "$3";fi
		ED="$(grep -w "$2" < "$SCHED_CONFIG"|awk '{print $3}')"
		sed -i "$(grep -nw "$2" < "$SCHED_CONFIG"|tr ':' ' '|awk '{print $1}'|head -1)s/.*/$2\t$3\t$ED/" "$SCHED_CONFIG"
		if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m updating DOMUs from config\n";fi
		while read -r i; do
			DOMU="$(echo "$i"|awk '{print $1}')"
			SCHD="$(echo "$i"|awk '{print $2}')"
			if [ "$VERBOSE" -ge "2" ];then
				xl $SCHD_PRG -d "$DOMU" -w "$SCHD"
			else
				xl $SCHD_PRG -d "$DOMU" -w "$SCHD" 2>/dev/null
			fi
		done < "$SCHED_CONFIG"
	elif [ "$1" == "remove" ] && [ -n "$2" ];then
		if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m removing %s from config\n" "$2";fi
		NUMBER="$(grep -nw "$2" < "$SCHED_CONFIG"|tr ':' ' '|awk '{print $1}'|head -1)"
		if [ -n "$NUMBER" ];then
			sed -i "${NUMBER}s/.*//" "$SCHED_CONFIG"
			sed -i "${NUMBER}d" "$SCHED_CONFIG"
		fi
	elif [ "$1" == "update" ];then
		if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m updating DOMUs from config\n";fi
		while read -r i; do
			DOMU="$(echo "$i"|awk '{print $1}')"
			SCHD="$(echo "$i"|awk '{print $2}')"
			if [ "$VERBOSE" -ge "2" ];then
				xl $SCHD_PRG -d "$DOMU" -w "$SCHD"
			else
				xl $SCHD_PRG -d "$DOMU" -w "$SCHD" 2>/dev/null
			fi
		done < "$SCHED_CONFIG"
	fi

	if [ -z "$1" ] || [ "$VERBOSE" -ge "2" ];then
		PAD_ID=38
		PAD_WEIGHT=7
		PAD_TARGET=7
		PAD_CAP=4
		PAD=$(printf '%0.1s' " "{1..60})
		printf "%s%*.*s%s%*.*s%s%*.*s%s%*.*s%s\n" \
				"Name" 0 $((38 - 4 - 2 )) "$PAD" \
				"ID" 0 $(($PAD_WEIGHT - 6 )) "$PAD" \
				"Weight" 0 $(($PAD_TARGET - 6 )) "$PAD" \
				"Target" 0 $(($PAD_CAP - 3 )) "$PAD" \
				"Cap"
		for DOM_NAME in $(xl list|awk '{if(NR>1)print $1}');do
			SCHD_RAW="$(xl $SCHD_PRG 2>/dev/null|grep -w "$DOM_NAME")"
			SCHD_NAME="$(awk '{print $1}' <<< "$SCHD_RAW")"
			SCHD_ID="$(awk '{print $2}' <<< "$SCHD_RAW")"
			SCHD_WEIGHT="$(awk '{print $3}' <<< "$SCHD_RAW")"
			SCHD_TARGET="$(grep -w "$DOM_NAME" "$SCHED_CONFIG"|awk '{print $2}')"
			SCHD_CAP="$(awk '{print $4}' <<< "$SCHD_RAW")"
			printf "%s%*.*s%s%*.*s%s%*.*s%s%*.*s%s\n" \
					"$SCHD_NAME" 0 $((38 - ${#SCHD_NAME} - ${#SCHD_ID} )) "$PAD" \
					"$SCHD_ID" 0 $(($PAD_WEIGHT - ${#SCHD_WEIGHT} )) "$PAD" \
					"$SCHD_WEIGHT" 0 $(($PAD_TARGET - ${#SCHD_TARGET} )) "$PAD" \
					"$SCHD_TARGET" 0 $(($PAD_CAP - ${#SCHD_CAP} )) "$PAD" \
					"$SCHD_CAP"
		done
	fi
	ENDTIME="$(date +%s)"
	TOTALTIME=$((ENDTIME-STARTTIME))
	TOTALTIME="$(date -d@$TOTALTIME -u +%H:%M:%S)"
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m script time: %s\n" "$TOTALTIME";fi
}

restart_dom(){
	if [ -z "$1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s erase DOMU\n" "$PROGRAM"
		exit 1
	fi
	if [ "$HELP" == "1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s erase DOMU\n" "$PROGRAM"
		exit 1
	fi
	if [ "$(check_exist "$1")" == "1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m DOMU specified not found\n"
		return
	fi
	STARTTIME="$(date +%s)"
	# If DOMU is running, kill it
	DOM="$(xl list|awk '{if(NR>2)print $1}'|grep -w "$1")"
	if [ -n "$DOM" ];then
		if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m %s shutting down\n" "$1";fi
		if [ "$FORCE" == "1" ];then
			if [ "$VERBOSE" -ge "2" ];then
				xl destroy "$1"
			else
				xl destroy "$1" 2> /dev/null
			fi
		elif [ "$FORCE" == "0" ];then
			if [ "$VERBOSE" -ge "2" ];then
				xl shutdown "$1"
			else
				xl shutdown "$1" 2> /dev/null
			fi
		fi
		COUNTER=0
		while [[ $DOM == *"$1"* ]];do
			DOM="$(xl list|awk '{if(NR>2)print $1}'|grep -w "$1")"
			sleep 1
			COUNTER=$((COUNTER + 1))
			if [ $COUNTER -gt 300 ];then
				if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;255;0;0m[!]\e[0m %s failed to shut down in a timely manner\n" "$1";fi
				if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;255;0;0m[!]\e[0m destroying %s\n" "$1";fi
				if [ "$VERBOSE" -ge "2" ];then
					xl destroy "$1"
				else
					xl destroy "$1" 2>/dev/null
				fi
				break
			fi
		done
	fi
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m %s is down\n" "$1";fi
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m starting %s\n" "$1";fi
	if [ "$VERBOSE" -ge "2" ];then
		xl create /etc/xen/"$1".cfg
	else
		xl create -q /etc/xen/"$1".cfg 2> /dev/null
	fi
	ENDTIME="$(date +%s)"
	TOTALTIME=$((ENDTIME-STARTTIME))
	TOTALTIME="$(date -d@$TOTALTIME -u +%H:%M:%S)"
	if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m script time: %s\n" "$TOTALTIME";fi
}

ed_dom(){
	if [ -z "$1" ] || [ -z "$2" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m usage: %s enable|disable DOMU\n" "$PROGRAM"
		exit 1
	fi
	if [ "$(check_exist "$2")" == "1" ];then
		>&2 printf "\e[38;2;255;0;0m[!]\e[0m DOMU specified not found\n"
		exit 1
	fi
	if [ "$(file /etc/xen/auto|awk '{print $2}')" != "directory" ];then
		if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m /etc/xen/auto is not a directory. Preserving configs and linking.\n";fi
		for i in /etc/xen/auto/*.cfg; do
			test -f "$i" || continue
			if [ "$VERBOSE" -ge "2" ];then printf "preserving %s\n" "$i";fi
			echo "$i" >> ./tmp.xen_cfg
		done
		if [ "$VERBOSE" -ge "2" ];then printf "remove /etc/xen/auto\n";fi
		rm -rf /etc/xen/auto
		if [ "$VERBOSE" -ge "2" ];then printf "mkdir /etc/xen/auto\n";fi
		mkdir -p /etc/xen/auto
		while read -r i; do
			i="$(echo "$i"|sed "s/auto\///")"
			if [ "$VERBOSE" -ge "2" ];then printf "link %s to /etc/xen/auto/\n" "$i";fi
			ln -sf "$i" /etc/xen/auto/
		done < ./tmp.xen_cfg
		rm -rf ./tmp.xen_cfg
	fi
	if [ "$1" == "enable" ];then
		if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m Writing config\n";fi
		SCHD="$(grep "$2" "$SCHED_CONFIG"|awk '{print $2}')"
		if [ -z "$SCHD" ];then
			>&2 printf "\e[38;2;255;0;0m[!]\e[0m DOMU not found in %s\n" "$SCHED_CONFIG"
			update_sched add "$2" 256
		fi
		SCHD="$(grep "$2" "$SCHED_CONFIG"|awk '{print $2}')"
		sed -i "$(grep -n "$2" < "$SCHED_CONFIG"| tr ':' ' ' | awk '{print $1}' | head -1)s/.*/$2\t$SCHD\t1/" "$SCHED_CONFIG"
	elif [ "$1" == "disable" ];then
		if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m Writing config\n";fi
		SCHD="$(grep "$2" "$SCHED_CONFIG"|awk '{print $2}')"
		if [ -z "$SCHD" ];then
			>&2 printf "\e[38;2;255;0;0m[!]\e[0m DOMU not found in %s\n" "$SCHED_CONFIG"
			update_sched add "$2" 256
		fi
		SCHD="$(grep "$2" "$SCHED_CONFIG"|awk '{print $2}')"
		sed -i "$(grep -n "$2" < "$SCHED_CONFIG"| tr ':' ' ' | awk '{print $1}' | head -1)s/.*/$2\t$SCHD\t0/" "$SCHED_CONFIG"
	fi
	while read -r i; do
		DOMU="$(echo "$i"|awk '{print $1}')"
		if [ "$DOMU" == "Domain-0" ];then
			continue
		fi
		AUTOBOOT="$(echo "$i"|awk '{print $3}')"
		if [ "$AUTOBOOT" == "1" ];then
			if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m Creating symlink for %s\n" "$DOMU";fi
			ln -sf /etc/xen/"$2".cfg /etc/xen/auto/
		elif [ "$AUTOBOOT" == "0" ];then
			if [ "$VERBOSE" -ge "1" ];then printf "\e[38;2;0;255;0m[+]\e[0m Removing symlink for %s\n" "$DOMU";fi
			rm -rf /etc/xen/auto/"$2".cfg
		fi
	done < "$SCHED_CONFIG"
	if [ "$VERBOSE" -ge "2" ];then
		cat "$SCHED_CONFIG"
	fi
}

PROGRAM="${0##*/}"
VERBOSE=0
HELP=0
FORCE=0
ENABLE=0
opts="$(getopt -o evVfh -l enable,version,help,verbose,force -n "$PROGRAM" -- "$@" 2>/dev/null)"
err=$?
if [ $err -ne 0 ];then
	usage
	exit
fi
eval set -- "$opts"
while true; do case $1 in
	-w|--wait) WAITFORBOOT=1; shift ;;
	-f|--force) FORCE=1; shift ;;
	-e|--enable) ENABLE=1; shift ;;
	-h|--help) HELP=1; shift ;;
	-v|--verbose) VERBOSE=$((VERBOSE+1)); shift ;;
	-V|--version) show_ver ;;
	--) shift; break ;;
esac done

for i in xl xen-create-image;do
	command -v $i >/dev/null 2>&1 || { >&2 printf "\e[38;2;255;0;0m[!]\e[0m This script is designed for use on a xen hypervisor version 4.1 or higher with xen-tools installed\n"; exit 1; }
done
if [ "$EUID" -ne 0 ];then
	>&2 printf "\e[38;2;255;0;0m[!]\e[0m Please run as root\n"
	exit 1
fi

if [ ! -f "$SCHED_CONFIG" ]; then
	printf "Domain-0	1024	0\n" > "$SCHED_CONFIG"
fi

case "$1" in
	disable|enable)		ed_dom "$@";;
	erase) shift;		erase_dom "$@" ;;
	restart) shift;		restart_dom "$@" ;;
	create) shift;		create_dom "$@" ;;
	schedule) shift;	update_sched "$@" ;;
	help)				usage ;;
	* )					usage ;;
esac
